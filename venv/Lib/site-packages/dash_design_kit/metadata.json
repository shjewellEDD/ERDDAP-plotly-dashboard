{
  "src/lib/components/App.react.js": {
    "description": "App provides Dash Design Kit styles\nand an editable theme editor.\nWrap the layout of your application with `App`\nand only use one `App` component per app.\n\nApp will re-style and theme your app with its own\nopinionated CSS. If you don't wish to use this CSS,\nyou may use functional components such as `ddk.FullScreen`,\n`ddk.Modal`, and `ddk.Graph` without wrapping your app's layout\nwith `ddk.App`.",
    "displayName": "App",
    "methods": [
      {
        "name": "themeRoot",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "theme",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateTheme",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "newThemeAttrs",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "themeStylesheets",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The theme's configuration.\nThis configuration is editable with the theme editor.\nThe theme editor will also auto-generate these variables\nfor you in the \"Copy & Save\" tab."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of the app's main layout, wrapped in the `ddk.App` container"
      },
      "show_editor": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether \"EDIT THEME\" button in the bottom left corner should be visible on the App's page"
      },
      "theme_dev_tools": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Theme the dev tools panel buttons with your DDK theme.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "embedded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Don't set opinionated styles that interfere with embedded apps\nRight now, the only style rule removed with this flag set is 'min-height: 100vh'",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "show_undo_redo": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the undo_redo button.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "notification_config": {
        "type": {
          "name": "shape",
          "value": {
            "timeout": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "bool"
                }
              ],
              "description": "The time in milliseconds for which the NotificationStore will\nremain onscreen. Default is 5*1000. -1 indicates no timeout.",
              "required": false
            },
            "displayed": {
              "name": "bool",
              "description": "Whether or not Notifications in NotificationStore are displayed.",
              "required": false
            },
            "width": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "description": "Default width of the NotificationStore.",
              "required": false
            },
            "border_radius": {
              "name": "string",
              "description": "The border-radius in 'px' of the Notification container.",
              "required": false
            },
            "type_display": {
              "name": "arrayOf",
              "value": {
                "name": "bool"
              },
              "description": "Array of booleans for filtering which types of array representing 'info', 'warn', 'danger'",
              "required": false
            }
          }
        },
        "required": false,
        "description": ""
      },
      "use_mobile_viewport": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optimize for mobile viewports on\nmobile.\nIf set to `False`, mobile devices will display in desktop mode.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the App container."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional user-defined CSS styles for the App container."
      }
    }
  },
  "src/lib/components/Block.react.js": {
    "description": "A layout component used for easily arranging groups of elements.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Block(\n        width=30,\n        children=[\n            # this content takes up 30% of the screen's width\n        ]\n    ),\n    ddk.Block(\n        width=70,\n        children=[\n            # this content takes up 70% of the screen's width\n        ]\n    ),\n    ddk.Block(\n        width=50,\n        children=[\n             # this content wraps onto the next line\n             # (below the blocks above) and takes up 50%\n             # of the screen's width\n        ]\n    )\n])\n```",
    "displayName": "Block",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the Block container."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number between 0 and 100 representing the width of the component\nwith respect to its parent.\n- This is a percentage by default: `25` means take up 25% of the space.\n- Unless <1, in which it represents a decimal: 0.25 is the same as 25\n\nNote that these units are different than the CSS `style` units where\n`style={'width': 25}` means _25 pixels_, not 25%.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the block.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the block, between the border\nand the edge of the content.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Block container."
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "A layout component used for easily arranging groups of elements.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Card(\n        width=30,\n        children=[\n            # this content takes up 30% of the screen's width\n        ]\n    ),\n    ddk.Card(\n        width=70,\n        children=[\n            # this content takes up 70% of the screen's width\n        ]\n    ),\n    ddk.Card(\n        width=50,\n        children=[\n             # this content wraps onto the next line\n             # (below the cards above) and takes up 50%\n             # of the screen's width\n        ]\n    )\n])\n```",
    "displayName": "Card",
    "methods": [
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleEvent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the Card container."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'shadow'",
              "computed": false
            },
            {
              "value": "'color'",
              "computed": false
            },
            {
              "value": "'simple-border'",
              "computed": false
            },
            {
              "value": "'flat'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The appearance of the card's border.",
        "defaultValue": {
          "value": "'shadow'",
          "computed": false
        }
      },
      "shadow_weight": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'heavy'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The appearance of the card's box-shadow, if set."
      },
      "card_hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Add a box-shadow to the card on hover."
      },
      "modal_config": {
        "type": {
          "name": "exact",
          "value": {
            "width": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "height": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that takes 'width' and 'height' arguments to define modal dimensions\nWidth or height can either be a string or a num N that gets converted to N%"
      },
      "rounded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies a border-radius to the card's border."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number between 0 and 100 representing the width of the component\nwith respect to its parent.\n- This is a percentage by default: `25` means take up 25% of the space.\n- Unless <1, in which it represents a decimal: 0.25 is the same as 25\n\nNote that these units are different than the CSS `style` units where\n`style={'width': 25}` means _25 pixels_, not 25%.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the card.\nOverrides theme.card_margin."
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the card, between the border\nand the edge of the content.\nOverrides theme.card_padding."
      },
      "padding_inner": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the card content, between the\nbounding box of the content and the content itself.",
        "defaultValue": {
          "value": "'5px'",
          "computed": false
        }
      },
      "box_shadow": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The box shadow(s) applied to the card. Overrides theme.card_box_shadow."
      },
      "border_width": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border width applied to the card. Overrides theme.card_border.width."
      },
      "border_style": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border width applied to the card. Overrides theme.card_border.style."
      },
      "border_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border color applied to the card. Overrides theme.card_border.color."
      },
      "border_radius": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border radius applied to the card. Overrides theme.card_border.radius."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Card container"
      }
    }
  },
  "src/lib/components/CardFooter.react.js": {
    "description": "A footer component designed to be the last child of a `Card` or `ControlCard`.\nTakes `title` (string), `fullscreen`, and `modal` (bool) arguments, in addition\nto `children[]` designed to contain Dash Core Components (DCC) controls\n(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`), or other components meant to be\ndisplayed in the bottom of the card.\n\nNote that placing a string in `title` and a string in `children` will have a similar effect.\nThe only differences are that the title string will be bolded and that the children\nproperty can include other components like controls (not just strings).\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Card(width=70,\n        children=[\n            # Allow the card to be expanded to fullscreen or modal\n            # Set the expanded modal dimensions to 80%\n            ddk.Graph(id=\"sample-graph-id\", figure={\n                 'data': [{\n                   'x': [1, 2, 3, 4],\n                   'y': [4, 1, 6, 9],\n                   'line': {'shape': 'spline'}\n                }]\n            }),\n            ddk.CardFooter(\n               dcc.DatePickerRange(\n                   start_date=datetime.datetime(2019, 1, 1),\n                   end_date=datetime.datetime(2020, 8, 1)\n               ),\n               title='String card footer',\n             )\n        ],\n    ),\n])\n```",
    "displayName": "CardFooter",
    "methods": [
      {
        "name": "needsUpdate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cardContext",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the CardFooter container.\nThese children should be Dash Core Components (DCC) controls\n(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`),\nor other components meant to be displayed in the bottom of the card."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "string or Dash component; optional"
      },
      "modal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card to be expanded to a modal."
      },
      "copy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card's innerText to be copied\nto the clipboard."
      },
      "modal_config": {
        "type": {
          "name": "exact",
          "value": {
            "width": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "height": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that takes 'width' and 'height' arguments to define modal dimensions\nWidth or height can either be a string or a num N that gets converted to N%"
      },
      "fullscreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card to be expanded to a modal."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the CardFooter container."
      }
    }
  },
  "src/lib/components/CardHeader.react.js": {
    "description": "A header component designed to be the first child of a `Card` or `ControlCard`.\nTakes `title` (string), `fullscreen`, and `modal` (bool) arguments, in addition\nto `children[]` designed to contain Dash Core Components (DCC) controls\n(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`), or other components meant to be\ndisplayed in the bottom of the card.\n\nNote that placing a string in `title` and a string in `children` will have a similar effect.\nThe only differences are that the title string will be bolded and that the children\nproperty can include other components like controls (not just strings).\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Card(width=70,\n        children=[\n            # Allow the card to be expanded to fullscreen or modal\n            # Set the expanded modal dimensions to 80%\n            ddk.CardHeader(\n               dcc.DatePickerRange(\n                   start_date=datetime.datetime(2019, 1, 1),\n                   end_date=datetime.datetime(2020, 8, 1)\n               ),\n               title='String card title',\n               modal=True, fullscreen=True,\n               modal_config={'width': 80, 'height': 80}),\n            ddk.Graph(id=\"sample-graph-id\", figure={\n                 'data': [{\n                   'x': [1, 2, 3, 4],\n                   'y': [4, 1, 6, 9],\n                   'line': {'shape': 'spline'}\n                }]\n            }),\n        ],\n    ),\n])\n```",
    "displayName": "CardHeader",
    "methods": [
      {
        "name": "needsUpdate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cardContext",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the CardHeader container.\nThese children should be Dash Core Components (DCC) controls\n(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`),\nor other components meant to be displayed in the top of the card."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "string or Dash component; optional"
      },
      "modal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card to be expanded to a modal."
      },
      "modal_container_className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The optional className of the modal container if modal=True"
      },
      "copy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card's innerText to be copied\nto the clipboard."
      },
      "modal_config": {
        "type": {
          "name": "exact",
          "value": {
            "width": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "height": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that takes 'width' and 'height' arguments to define modal dimensions\nWidth or height can either be a string or a num N that gets converted to N%"
      },
      "fullscreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays an icon that allows the card to be expanded to a modal."
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the CardHeader.\nOverrides theme.card_header_margin."
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the CardHeader, between the border\nand the edge of the content.\nOverrides theme.card_header_padding."
      },
      "background_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The background color applied to the CardHeader. Overrides theme.card_header_background_color."
      },
      "box_shadow": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The box shadow(s) applied to the CardHeader. Overrides theme.card_header_box_shadow."
      },
      "border_width": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border width applied to the CardHeader. Overrides theme.card_header_border.width."
      },
      "border_style": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border style applied to the CardHeader. Overrides theme.card_header_border.style."
      },
      "border_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border color applied to the CardHeader. Overrides theme.card_header_border.color."
      },
      "border_radius": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border radius applied to the CardHeader. Overrides theme.card_header_border.radius."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the CardHeader container."
      }
    }
  },
  "src/lib/components/CollapsibleMenu.react.js": {
    "description": "A leveled menu, meant to be included in a `ddk.Header` or `ddk.Sidebar`.",
    "displayName": "CollapsibleMenu",
    "methods": [
      {
        "name": "isOverflow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "el1",
            "type": null
          },
          {
            "name": "el2",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClickOutside",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onLocationChanged",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updateDimensions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggleCollapse",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The top-level title (label) of the Collapsible Menu"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the CollapsibleMenu container.\nChildren of CollapsibleMenu should be of type (`dcc.Link`, `html.A`).\nNested `CollapsibleMenu` children are not supported at the moment."
      },
      "default_open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines whether the submenu should be open on load"
      },
      "self_collapsing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines whether the submenu collapses when another submenu is clicked"
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/ControlCard.react.js": {
    "description": "A layout component used for easily arranging groups of\ncontrols (Dash Core Components) wrapped in ControlItems.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.ControlCard(\n        children=[\n              ddk.ControlItem(\n                  dcc.Slider(\n                      min=0,\n                      max=10,\n                      marks={\n                          0: '0',\n                          5: '5',\n                          10: '10'\n                      },\n                      value=5\n                  ),\n                  label='Thrusters'\n              ),\n              ddk.ControlItem(\n                  dcc.Input(\n                      value=50,\n                      type='number'\n                  ),\n                  label='Power'\n              )\n          ],\n        orientation='horizontal',\n        label_position='left',\n    )\n])\n```",
    "displayName": "ControlCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components, most commonly `ddk.ControlItem` items,\nthat are children of the ControlCard container."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'shadow'",
              "computed": false
            },
            {
              "value": "'color'",
              "computed": false
            },
            {
              "value": "'simple-border'",
              "computed": false
            },
            {
              "value": "'flat'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The appearance of the card's border."
      },
      "shadow_weight": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'heavy'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The appearance of the card's box-shadow, if set."
      },
      "card_hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Add a box-shadow to the card on hover."
      },
      "rounded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies a border-radius to the card's border."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number between 0 and 100 representing the width of the component\nwith respect to its parent.\n- This is a percentage by default: `25` means take up 25% of the space.\n- Unless <1, in which it represents a decimal: 0.25 is the same as 25\n\nNote that these units are different than the CSS `style` units where\n`style={'width': 25}` means _25 pixels_, not 25%.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the card."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'vertical'",
              "computed": false
            },
            {
              "value": "'horizontal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The orientation of the set of controls.",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "label_position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positon of the label with respect to the control.",
        "defaultValue": {
          "value": "'top'",
          "computed": false
        }
      },
      "label_text_alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The horizontal label text alignment.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "label_style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional label CSS styles."
      },
      "control_position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The control alignment relative to the ControlCard container.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "padding": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The padding of (i.e. whitespace around) each individual control. Takes `%` int or string `Npx, Nem`, etc. values",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "wrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Given a sum of control widths of horizontally-oriented controls >=100%, whether or not they\nshould wrap onto the next line or stay in a single line.\nBy default, if there are more than 5 (20% default width * 5 = 100%) controls, they will wrap.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Block container."
      }
    }
  },
  "src/lib/components/ControlItem.react.js": {
    "description": "A container for DCC controls intended to be supplied as `children` to\nthe `ddk.ControlCard` component.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.ControlCard(\n        children=[\n              ddk.ControlItem(\n                  dcc.Slider(\n                      min=0,\n                      max=10,\n                      marks={\n                          0: '0',\n                          5: '5',\n                          10: '10'\n                      },\n                      value=5\n                  ),\n                  label='Thrusters'\n              ),\n              ddk.ControlItem(\n                  dcc.Input(\n                      value=50,\n                      type='number'\n                  ),\n                  label='Power'\n              )\n          ],\n        orientation='horizontal',\n        label_position='left',\n    )\n])\n```",
    "displayName": "ControlItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "These should be `dcc` control elements like `dcc.Dropdown`, `dcc.Input`, `dcc.DatePickerSingle` or `htmlButton`."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text label for an individual control."
      },
      "label_hover_text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display when you hover over the Control's label."
      },
      "label_icon_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of the font-awesome icon to display beside the label."
      },
      "label_position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positon of the label with respect to the control. Overrides the global\nposition inherited from the ControlItem's ControlCard."
      },
      "label_text_alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The horizontal label text alignment. Overrides the global\ntext alignment inherited from the ControlItem's ControlCard."
      },
      "label_style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional label CSS styles. Overrides the global label\nstyle inherited from the ControlItem's ControlCard."
      },
      "padding": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The padding of (i.e. whitespace around) each individual control. Takes `%` int or string `Npx, Nem`, etc. values.\nOverrides the global item padding inherited from the ControlItem's ControlCard."
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The width of the control. Takes percent int or string `Npx, Nem`, etc. values\nbetween 0 and 100 representing the width of the component\nwith respect to its parent.\n  - This is a percentage by default: `25` means take up 25 percent of the space.\n  - Unless <1, in which it represents a decimal: 0.25 is the same as 25\n\nNote that these units are different than the CSS `style` units where\n`style={'width': 25}` means _25 pixels_, not 25 percent.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The height of the control. Takes percent int or string `Npx, Nem`, etc. values."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Additional user-supplied classNames for the control container"
      }
    }
  },
  "src/lib/components/DataCard.react.js": {
    "description": "This component will render a styled DataCard with a label, large number, or\nsublabel. Style includes handle (with optional icon) or spark trace\nif data is provided.",
    "displayName": "DataCard",
    "methods": [
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleEvent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The large number"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The textual label that describes the label"
      },
      "sub": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "A smaller number to accompany `value`"
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color modifies:\n- The background color of the \"handle\". If not supplied, then this will be the accent color.\n- If `trace_y` is supplied, then `color` is the color of the\n  graph's line (unless `background_color` is supplied, in which case\n  the trace line will be white). If `color` and `background_color`\n  aren't supplied, then the color of the line will be the theme's accent\n  color."
      },
      "trace_x": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The `x` data in the graph."
      },
      "trace_y": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The `y` data in the graph."
      },
      "trace_text": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The `text` data in the graph (appears on hover)"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font awesome icon name.\nThis is the same as the `ddk.Icon` `icon_name` property."
      },
      "background_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`background_color` is only used if `trace_y` is supplied.\nIn which case, it will be the background color of the entire DataCard"
      },
      "text_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of the text. If this isn't supplied, then\nit will default to the theme's text color."
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the DataCard.\nOverrides theme.card_header_margin."
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the DataCard, between the border\nand the edge of the content.\nOverrides theme.card_header_padding."
      },
      "box_shadow": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The box shadow(s) applied to the DataCard. Overrides theme.card_header_box_shadow."
      },
      "border_width": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border width applied to the DataCard. Overrides theme.card_header_border.width."
      },
      "border_style": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border style applied to the DataCard. Overrides theme.card_header_border.style."
      },
      "border_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border color applied to the DataCard. Overrides theme.card_header_border.color."
      },
      "border_radius": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border radius applied to the DataCard. Overrides theme.card_header_border.radius."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style overrides to the outermost container"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width (in percentage) of the component with respect to its parent.\nThis is the same type of unit that is used in\n`Block`, `Card`, & `ControlCard`.",
        "defaultValue": {
          "value": "25",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/DataTable.react.generated.js": {
    "description": "Dash DataTable is an interactive table component designed for viewing, editing, and exploring large datasets.\n\n`ddk.DataTable` themes Dash DataTable (`dash_table.DataTable`) according to your Dash Design Kit theme.\n\nDataTable is rendered with standard, semantic HTML <table/> markup,\nwhich makes it accessible, responsive, and easy to style.\n\nThis component was written from scratch in React.js specifically for the Dash community.\nIts API was designed to be ergonomic and its behavior is completely customizable through its properties.\n\n***Note that you must `import dash_table` in order to use `ddk.DataTable` (Python)***\n   ***or `library(dashTable)` to use `ddkDataTable` (R)***\n\n**Example Usage**\n```\nimport dash\nimport dash_table\nimport pandas as pd\nimport dash_design_kit as ddk\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/solar.csv')\n\napp = dash.Dash(__name__)\n\napp.layout = ddk.App([\n    ddk.DataTable(\n       id='table',\n       columns=[{\"name\": i, \"id\": i} for i in df.columns],\n       data=df.to_dict(\"rows\"),\n       editable=True\n   )\n])\n```",
    "displayName": "DataTable",
    "methods": [
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleEvent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "active_cell": {
        "type": {
          "name": "exact",
          "value": {
            "row": {
              "name": "number",
              "required": false
            },
            "column": {
              "name": "number",
              "required": false
            },
            "row_id": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "column_id": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The row and column indices and IDs of the currently active cell.\n`row_id` is only returned if the data rows have an `id` key."
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "clearable": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'first'",
                        "computed": false
                      },
                      {
                        "value": "'last'",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "bool"
                    }
                  }
                ],
                "description": "If true, the user can clear the column by clicking on the `clear`\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf `last`, the `clear` action button will only appear on the last header\nrow. If `first` it will only appear on the first header row. These\nare respectively shortcut equivalents to `[false, ..., false, true]` and\n`[true, false, ..., false]`.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the `clear` action button in by\nsupplying an array of booleans.\nFor example, `[true, false]` will display the `clear` action button\non the first row, but not the second row.\nIf the `clear` action button appears on a merged column, then clicking\non that button will clear *all* of the merged columns associated with it.\nUnlike `column.deletable`, this action does not remove the column(s)\nfrom the table. It only removed the associated entries from `data`.",
                "required": false
              },
              "deletable": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'first'",
                        "computed": false
                      },
                      {
                        "value": "'last'",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "bool"
                    }
                  }
                ],
                "description": "If true, the user can remove the column by clicking on the `delete`\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf `last`, the `delete` action button will only appear on the last header\nrow. If `first` it will only appear on the first header row. These\nare respectively shortcut equivalents to `[false, ..., false, true]` and\n`[true, false, ..., false]`.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the `delete` action button in by\nsupplying an array of booleans.\nFor example, `[true, false]` will display the `delete` action button\non the first row, but not the second row.\nIf the `delete` action button appears on a merged column, then clicking\non that button will remove *all* of the merged columns associated with it.",
                "required": false
              },
              "editable": {
                "name": "bool",
                "description": "There are two `editable` flags in the table.\nThis is the  column-level editable flag and there is\nalso the table-level `editable` flag.\nThese flags determine whether the contents of the table\nare editable or not.\nIf the column-level `editable` flag is set it overrides\nthe table-level `editable` flag for that column.",
                "required": false
              },
              "hideable": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'first'",
                        "computed": false
                      },
                      {
                        "value": "'last'",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "bool"
                    }
                  }
                ],
                "description": "If true, the user can hide the column by clicking on the `hide`\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf `last`, the `hide` action button will only appear on the last header\nrow. If `first` it will only appear on the first header row. These\nare respectively shortcut equivalents to `[false, ..., false, true]` and\n`[true, false, ..., false]`.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the `hide` action button in by\nsupplying an array of booleans.\nFor example, `[true, false]` will display the `hide` action button\non the first row, but not the second row.\nIf the `hide` action button appears on a merged column, then clicking\non that button will hide *all* of the merged columns associated with it.",
                "required": false
              },
              "renamable": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'first'",
                        "computed": false
                      },
                      {
                        "value": "'last'",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "bool"
                    }
                  }
                ],
                "description": "If true, the user can rename the column by clicking on the `rename`\naction button on the column. If there are multiple header rows, true\nwill display the action button on each row.\nIf `last`, the `rename` action button will only appear on the last header\nrow. If `first` it will only appear on the first header row. These\nare respectively shortcut equivalents to `[false, ..., false, true]` and\n`[true, false, ..., false]`.\nIf there are merged, multi-header columns then you can choose\nwhich column header row to display the `rename` action button in by\nsupplying an array of booleans.\nFor example, `[true, false]` will display the `rename` action button\non the first row, but not the second row.\nIf the `rename` action button appears on a merged column, then clicking\non that button will rename *all* of the merged columns associated with it.",
                "required": false
              },
              "selectable": {
                "name": "union",
                "value": [
                  {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'first'",
                        "computed": false
                      },
                      {
                        "value": "'last'",
                        "computed": false
                      }
                    ]
                  },
                  {
                    "name": "bool"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "bool"
                    }
                  }
                ],
                "description": "If true, the user can select the column by clicking on the checkbox or radio button\nin the column. If there are multiple header rows, true will display the input\non each row.\nIf `last`, the input will only appear on the last header row. If `first` it will only\nappear on the first header row. These are respectively shortcut equivalents to\n`[false, ..., false, true]` and `[true, false, ..., false]`.\nIf there are merged, multi-header columns then you can choose which column header\nrow to display the input in by supplying an array of booleans.\nFor example, `[true, false]` will display the `selectable` input on the first row,\nbut now on the second row.\nIf the `selectable` input appears on a merged columns, then clicking on that input\nwill select *all* of the merged columns associated with it.\nThe table-level prop `column_selectable` is used to determine the type of column\nselection to use.",
                "required": false
              },
              "format": {
                "name": "exact",
                "value": {
                  "locale": {
                    "name": "exact",
                    "value": {
                      "symbol": {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        },
                        "required": false
                      },
                      "decimal": {
                        "name": "string",
                        "required": false
                      },
                      "group": {
                        "name": "string",
                        "required": false
                      },
                      "grouping": {
                        "name": "arrayOf",
                        "value": {
                          "name": "number"
                        },
                        "required": false
                      },
                      "numerals": {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        },
                        "required": false
                      },
                      "percent": {
                        "name": "string",
                        "required": false
                      },
                      "separate_4digits": {
                        "name": "bool",
                        "required": false
                      }
                    },
                    "required": false
                  },
                  "nully": {
                    "name": "any",
                    "required": false
                  },
                  "prefix": {
                    "name": "number",
                    "required": false
                  },
                  "specifier": {
                    "name": "string",
                    "required": false
                  }
                },
                "description": "The formatting applied to the column's data.\nThis prop is derived from the [d3-format](https://github.com/d3/d3-format) library specification. Apart from\nbeing structured slightly differently (under a single prop), the usage\nis the same.\n'locale': represents localization specific formatting information.\n When left unspecified, will use the default value provided by d3-format.\n The keys are as follows:\n 'symbol': (default: ['$', '']) a list of two strings representing the\n prefix and suffix symbols. Typically used for currency, and implemented using d3's\n currency format, but you can use this for other symbols such as measurement units;\n 'decimal': (default: '.') the string used for the decimal separator;\n 'group': (default: ',') the string used for the groups separator;\n 'grouping': (default: [3]) a list of integers representing the grouping pattern.\n 'numerals': a list of ten strings used as replacements for numbers 0-9;\n 'percent': (default: '%') the string used for the percentage symbol;\n 'separate_4digits': (default: True) separate integers with 4-digits or less.\n'nully': a value that will be used in place of the nully value during formatting.\n  If the value type matches the column type, it will be formatted normally.\n'prefix': a number representing the SI unit to use during formatting.\n  See `dash_table.Format.Prefix` enumeration for the list of valid values\n'specifier': (default: '') represents the rules to apply when formatting the number.\ndash_table.FormatTemplate contains helper functions to rapidly use certain\ntypical number formats.",
                "required": false
              },
              "id": {
                "name": "string",
                "description": "The `id` of the column.\nThe column `id` is used to match cells in data\nwith particular columns.\nThe `id` is not visible in the table.",
                "required": true
              },
              "name": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "string"
                    }
                  }
                ],
                "description": "The `name` of the column,\nas it appears in the column header.\nIf `name` is a list of strings, then the columns\nwill render with multiple headers rows.",
                "required": true
              },
              "presentation": {
                "name": "enum",
                "value": [
                  {
                    "value": "'input'",
                    "computed": false
                  },
                  {
                    "value": "'dropdown'",
                    "computed": false
                  },
                  {
                    "value": "'markdown'",
                    "computed": false
                  }
                ],
                "description": "The `presentation` to use to display the value.\nDefaults to 'input' for ['datetime', 'numeric', 'text', 'any'].",
                "required": false
              },
              "on_change": {
                "name": "exact",
                "value": {
                  "action": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'coerce'",
                        "computed": false
                      },
                      {
                        "value": "'none'",
                        "computed": false
                      },
                      {
                        "value": "'validate'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "failure": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'accept'",
                        "computed": false
                      },
                      {
                        "value": "'default'",
                        "computed": false
                      },
                      {
                        "value": "'reject'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                },
                "description": "The `on_change` behavior of the column for user-initiated modifications.\n'action' (default 'coerce'):\n none: do not validate data;\n coerce: check if the data corresponds to the destination type and\n attempts to coerce it into the destination type if not;\n validate: check if the data corresponds to the destination type (no coercion).\n'failure' (default 'reject'): what to do with the value if the action fails:\n accept: use the invalid value;\n default: replace the provided value with `validation.default`;\n reject: do not modify the existing value.",
                "required": false
              },
              "sort_as_null": {
                "name": "arrayOf",
                "value": {
                  "name": "union",
                  "value": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "number"
                    },
                    {
                      "name": "bool"
                    }
                  ]
                },
                "description": "An array of string, number and boolean values that are treated as `null`\n(i.e. ignored and always displayed last) when sorting.\nThis value overrides the table-level `sort_as_null`.",
                "required": false
              },
              "validation": {
                "name": "exact",
                "value": {
                  "allow_null": {
                    "name": "bool",
                    "required": false
                  },
                  "default": {
                    "name": "any",
                    "required": false
                  },
                  "allow_YY": {
                    "name": "bool",
                    "required": false
                  }
                },
                "description": "The `validation` options.\n'allow_null': Allow the use of nully values. (undefined, null, NaN) (default: false)\n'default': The default value to apply with on_change.failure = 'default'. (default: null)\n'allow_YY': `datetime` columns only, allow 2-digit years (default: false).\n  If true, we interpret years as ranging from now-70 to now+29 - in 2019\n  this is 1949 to 2048 but in 2020 it will be different. If used with\n  `action: 'coerce'`, will convert user input to a 4-digit year.",
                "required": false
              },
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'any'",
                    "computed": false
                  },
                  {
                    "value": "'numeric'",
                    "computed": false
                  },
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'datetime'",
                    "computed": false
                  }
                ],
                "description": "The data-type of the column's data.\n'numeric': represents both floats and ints.\n'text': represents a string.\n'datetime': a string representing a date or date-time, in the form:\n  'YYYY-MM-DD HH:MM:SS.ssssss' or some truncation thereof. Years must\n  have 4 digits, unless you use `validation.allow_YY: true`. Also\n  accepts 'T' or 't' between date and time, and allows timezone info\n  at the end. To convert these strings to Python `datetime` objects,\n  use `dateutil.parser.isoparse`. In R use `parse_iso_8601` from the\n  `parsedate` library.\n  WARNING: these parsers do not work with 2-digit years, if you use\n  `validation.allow_YY: true` and do not coerce to 4-digit years.\n  And parsers that do work with 2-digit years may make a different\n  guess about the century than we make on the front end.\n'any': represents any type of data.\nDefaults to 'any' if undefined.\nNOTE: This feature has not been fully implemented.\nIn the future, it's data types will impact things like\ntext formatting options in the cell (e.g. display 2 decimals\nfor a number), filtering options and behavior, and editing\nbehavior.\nStay tuned by following [https://github.com/plotly/dash-table/issues/166](https://github.com/plotly/dash-table/issues/166)",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Columns describes various aspects about each individual column.\n`name` and `id` are the only required parameters."
      },
      "include_headers_on_copy_paste": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, headers are included when copying from the table to different\ntabs and elsewhere. Note that headers are ignored when copying from the table onto itself and\nbetween two tables within the same tab.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "locale_format": {
        "type": {
          "name": "exact",
          "value": {
            "symbol": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "decimal": {
              "name": "string",
              "required": false
            },
            "group": {
              "name": "string",
              "required": false
            },
            "grouping": {
              "name": "arrayOf",
              "value": {
                "name": "number"
              },
              "required": false
            },
            "numerals": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "percent": {
              "name": "string",
              "required": false
            },
            "separate_4digits": {
              "name": "bool",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The localization specific formatting information applied to all columns in the table.\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\nWhen left unspecified, each individual nested prop will default to a pre-determined value.\n  'symbol': (default: ['$', '']) a list of two strings representing the\n  prefix and suffix symbols. Typically used for currency, and implemented using d3's\n  currency format, but you can use this for other symbols such as measurement units.\n  'decimal': (default: '.') the string used for the decimal separator.\n  'group': (default: ',') the string used for the groups separator.\n  'grouping': (default: [3]) a list of integers representing the grouping pattern.\n  'numerals': a list of ten strings used as replacements for numbers 0-9.\n  'percent': (default: '%') the string used for the percentage symbol.\n  'separate_4digits': (default: True) separate integers with 4-digits or less."
      },
      "markdown_options": {
        "type": {
          "name": "exact",
          "value": {
            "link_target": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'_blank'",
                      "computed": false
                    },
                    {
                      "value": "'_parent'",
                      "computed": false
                    },
                    {
                      "value": "'_self'",
                      "computed": false
                    },
                    {
                      "value": "'_top'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "The `markdown_options` property allows customization of the markdown cells behavior.\n 'link_target': (default: '_blank') the link's behavior (_blank opens the link in a\nnew tab, _parent opens the link in the parent frame, _self opens the link in the\ncurrent tab, and _top opens the link in the top frame) or a string",
        "defaultValue": {
          "value": "{\n    link_target: '_blank'\n}",
          "computed": false
        }
      },
      "css": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "selector": {
                "name": "string",
                "required": true
              },
              "rule": {
                "name": "string",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "The `css` property is a way to embed CSS selectors and rules\nonto the page.\nWe recommend starting with the `style_*` properties\nbefore using this `css` property.\nExample:\n[\n    {\"selector\": \".dash-spreadsheet\", \"rule\": 'font-family: \"monospace\"'}\n]",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an 'id' key, whose value is its row ID. If there\nis a column with ID='id' this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {'column-1': 4.5, 'column-2': 'montreal', 'column-3': 'canada'},\n     {'column-1': 8, 'column-2': 'boston', 'column-3': 'america'}\n]"
      },
      "data_previous": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The previous state of `data`. `data_previous`\nhas the same structure as `data` and it will be updated\nwhenever `data` changes, either through a callback or\nby editing the table.\nThis is a read-only property: setting this property will not\nhave any impact on the table."
      },
      "data_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The unix timestamp when the data was last edited.\nUse this property with other timestamp properties\n(such as `n_clicks_timestamp` in `dash_html_components`)\nto determine which property has changed within a callback."
      },
      "editable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the data in all of the cells is editable.\nWhen `editable` is True, particular columns can be made\nuneditable by setting `editable` to `False` inside the `columns`\nproperty.\nIf False, then the data in all of the cells is uneditable.\nWhen `editable` is False, particular columns can be made\neditable by setting `editable` to `True` inside the `columns`\nproperty.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "end_cell": {
        "type": {
          "name": "exact",
          "value": {
            "row": {
              "name": "number",
              "required": false
            },
            "column": {
              "name": "number",
              "required": false
            },
            "row_id": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "column_id": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n`end_cell` represents the row / column coordinates and IDs of the cell\nin one of the corners of the region.\n`start_cell` represents the coordinates of the other corner."
      },
      "export_columns": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'all'",
              "computed": false
            },
            {
              "value": "'visible'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Denotes the columns that will be used in the export data file.\nIf `all`, all columns will be used (visible + hidden). If `visible`,\nonly the visible columns will be used. Defaults to `visible`.",
        "defaultValue": {
          "value": "'visible'",
          "computed": false
        }
      },
      "export_format": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'csv'",
              "computed": false
            },
            {
              "value": "'xlsx'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Denotes the type of the export data file,\nDefaults to `'none'`",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "export_headers": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'ids'",
              "computed": false
            },
            {
              "value": "'names'",
              "computed": false
            },
            {
              "value": "'display'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Denotes the format of the headers in the export data file.\nIf `'none'`, there will be no header. If `'display'`, then the header\nof the data file will be be how it is currently displayed. Note that\n`'display'` is only supported for `'xlsx'` export_format and will behave\nlike `'names'` for `'csv'` export format. If `'ids'` or `'names'`,\nthen the headers of data file will be the column id or the column\nnames, respectively"
      },
      "fill_width": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`fill_width` toggles between a set of CSS for two common behaviors:\nTrue: The table container's width will grow to fill the available space;\nFalse: The table container's width will equal the width of its content.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hidden_columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "List of columns ids of the columns that are currently hidden.\nSee the associated nested prop `columns.hideable`."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of the table."
      },
      "is_focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the `active_cell` is in a focused state."
      },
      "merge_duplicate_headers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then column headers that have neighbors with duplicate names\nwill be merged into a single cell.\nThis will be applied for single column headers and multi-column\nheaders."
      },
      "fixed_columns": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "exact",
              "value": {
                "headers": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "false",
                      "computed": false
                    }
                  ],
                  "required": false
                },
                "data": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "0",
                      "computed": false
                    }
                  ],
                  "required": false
                }
              }
            },
            {
              "name": "exact",
              "value": {
                "headers": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "true",
                      "computed": false
                    }
                  ],
                  "required": true
                },
                "data": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "`fixed_columns` will \"fix\" the set of columns so that\nthey remain visible when scrolling horizontally across\nthe unfixed columns. `fixed_columns` fixes columns\nfrom left-to-right.\nIf `headers` is False, no columns are fixed.\nIf `headers` is True, all operation columns (see `row_deletable` and `row_selectable`)\nare fixed. Additional data columns can be fixed by\nassigning a number to `data`.\nDefaults to `{ headers: False }`.\nNote that fixing columns introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.",
        "defaultValue": {
          "value": "{\n    headers: false,\n    data: 0\n}",
          "computed": false
        }
      },
      "fixed_rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "exact",
              "value": {
                "headers": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "false",
                      "computed": false
                    }
                  ],
                  "required": false
                },
                "data": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "0",
                      "computed": false
                    }
                  ],
                  "required": false
                }
              }
            },
            {
              "name": "exact",
              "value": {
                "headers": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "true",
                      "computed": false
                    }
                  ],
                  "required": true
                },
                "data": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "`fixed_rows` will \"fix\" the set of rows so that\nthey remain visible when scrolling vertically down\nthe table. `fixed_rows` fixes rows\nfrom top-to-bottom, starting from the headers.\nIf `headers` is False, no rows are fixed.\nIf `headers` is True, all header and filter rows (see `filter_action`) are\nfixed. Additional data rows can be fixed by assigning\na number to `data`.\nDefaults to `{ headers: False }`.\nNote that fixing rows introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.",
        "defaultValue": {
          "value": "{\n    headers: false,\n    data: 0\n}",
          "computed": false
        }
      },
      "column_selectable": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'single'",
              "computed": false
            },
            {
              "value": "'multi'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `single`, then the uer can select a single column or group\nof merged columns via the radio button that will appear in the\nheader rows.\nIf `multi`, then the user can select multiple columns or groups\nof merged columns via the checkbox that will appear in the header\nrows.\nIf false, then the user will not be able to select columns and no\ninput will appear in the header rows.\nWhen a column is selected, its id will be contained in `selected_columns`\nand `derived_viewport_selected_columns`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "row_deletable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then a `x` will appear next to each `row`\nand the user can delete the row."
      },
      "cell_selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True (default), then it is possible to click and navigate\ntable cells.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "row_selectable": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'single'",
              "computed": false
            },
            {
              "value": "'multi'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `single`, then the user can select a single row\nvia a radio button that will appear next to each row.\nIf `multi`, then the user can select multiple rows\nvia a checkbox that will appear next to each row.\nIf false, then the user will not be able to select rows\nand no additional UI elements will appear.\nWhen a row is selected, its index will be contained\nin `selected_rows`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected_cells": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "row": {
                "name": "number",
                "required": false
              },
              "column": {
                "name": "number",
                "required": false
              },
              "row_id": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              "column_id": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "`selected_cells` represents the set of cells that are selected,\nas an array of objects, each item similar to `active_cell`.\nMultiple cells can be selected by holding down shift and\nclicking on a different cell or holding down shift and navigating\nwith the arrow keys.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`selected_rows` contains the indices of rows that\nare selected via the UI elements that appear when\n`row_selectable` is `'single'` or `'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "`selected_columns` contains the ids of columns that\nare selected via the UI elements that appear when\n`column_selectable` is `'single' or 'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_row_ids": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "`selected_row_ids` contains the ids of rows that\nare selected via the UI elements that appear when\n`row_selectable` is `'single'` or `'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the user makes changes."
      },
      "start_cell": {
        "type": {
          "name": "exact",
          "value": {
            "row": {
              "name": "number",
              "required": false
            },
            "column": {
              "name": "number",
              "required": false
            },
            "row_id": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "column_id": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n`start_cell` represents the [row, column] coordinates of the cell\nin one of the corners of the region.\n`end_cell` represents the coordinates of the other corner."
      },
      "style_as_list_view": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the table will be styled like a list view\nand not have borders between the columns.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "page_action": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'custom'",
              "computed": false
            },
            {
              "value": "'native'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "`page_action` refers to a mode of the table where\nnot all of the rows are displayed at once: only a subset\nare displayed (a \"page\") and the next subset of rows\ncan viewed by clicking \"Next\" or \"Previous\" buttons\nat the bottom of the page.\nPagination is used to improve performance: instead of\nrendering all of the rows at once (which can be expensive),\nwe only display a subset of them.\nWith pagination, we can either page through data that exists\nin the table (e.g. page through `10,000` rows in `data` `100` rows at a time)\nor we can update the data on-the-fly with callbacks\nwhen the user clicks on the \"Previous\" or \"Next\" buttons.\nThese modes can be toggled with this `page_action` parameter:\n`'native'`: all data is passed to the table up-front, paging logic is\nhandled by the table;\n`'custom'`: data is passed to the table one page at a time, paging logic\nis handled via callbacks;\n`none`: disables paging, render all of the data at once.",
        "defaultValue": {
          "value": "'native'",
          "computed": false
        }
      },
      "page_current": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`page_current` represents which page the user is on.\nUse this property to index through data in your callbacks with\nbackend paging.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "page_count": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`page_count` represents the number of the pages in the\npaginated table. This is really only useful when performing\nbackend pagination, since the front end is able to use the\nfull size of the table to calculate the number of pages."
      },
      "page_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`page_size` represents the number of rows that will be\ndisplayed on a particular page when `page_action` is `'custom'` or `'native'`",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "dropdown": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "exact",
            "value": {
              "clearable": {
                "name": "bool",
                "required": false
              },
              "options": {
                "name": "arrayOf",
                "value": {
                  "name": "exact",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "string"
                        },
                        {
                          "name": "bool"
                        }
                      ],
                      "required": true
                    }
                  }
                },
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`dropdown` specifies dropdown options for different columns.\nEach entry refers to the column ID.\nThe `clearable` property defines whether the value can be deleted.\nThe `options` property refers to the `options` of the dropdown.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "dropdown_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "clearable": {
                "name": "bool",
                "required": false
              },
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "string",
                    "required": false
                  },
                  "filter_query": {
                    "name": "string",
                    "required": false
                  }
                },
                "required": false
              },
              "options": {
                "name": "arrayOf",
                "value": {
                  "name": "exact",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "string"
                        },
                        {
                          "name": "bool"
                        }
                      ],
                      "required": true
                    }
                  }
                },
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`dropdown_conditional` specifies dropdown options in various columns and cells.\nThis property allows you to specify different dropdowns\ndepending on certain conditions. For example, you may\nrender different \"city\" dropdowns in a row depending on the\ncurrent value in the \"state\" column.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "dropdown_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "objectOf",
            "value": {
              "name": "exact",
              "value": {
                "clearable": {
                  "name": "bool",
                  "required": false
                },
                "options": {
                  "name": "arrayOf",
                  "value": {
                    "name": "exact",
                    "value": {
                      "label": {
                        "name": "string",
                        "required": true
                      },
                      "value": {
                        "name": "union",
                        "value": [
                          {
                            "name": "number"
                          },
                          {
                            "name": "string"
                          },
                          {
                            "name": "bool"
                          }
                        ],
                        "required": true
                      }
                    }
                  },
                  "required": true
                }
              }
            }
          }
        },
        "required": false,
        "description": "`dropdown_data` specifies dropdown options on a row-by-row, column-by-column basis.\nEach item in the array corresponds to the corresponding dropdowns for the `data` item\nat the same index. Each entry in the item refers to the Column ID.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "exact",
                "value": {
                  "delay": {
                    "name": "number",
                    "required": false
                  },
                  "duration": {
                    "name": "number",
                    "required": false
                  },
                  "type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'markdown'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              },
              {
                "name": "string"
              }
            ]
          }
        },
        "required": false,
        "description": "`tooltip` represents the tooltip shown\nfor different columns.\nThe `property` name refers to the column ID.\nThe `type` refers to the type of tooltip syntax used\nfor the tooltip generation. Can either be `markdown`\nor `text`. Defaults to `text`.\nThe `value` refers to the syntax-based content of\nthe tooltip. This value is required.\nThe `delay` represents the delay in milliseconds before\nthe tooltip is shown when hovering a cell. This overrides\nthe table's `tooltip_delay` property. If set to `null`,\nthe tooltip will be shown immediately.\nThe `duration` represents the duration in milliseconds\nduring which the tooltip is shown when hovering a cell.\nThis overrides the table's `tooltip_duration` property.\nIf set to `null`, the tooltip will not disappear.\nAlternatively, the value of the property can also be\na plain string. The `text` syntax will be used in\nthat case.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tooltip_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "delay": {
                "name": "number",
                "required": false
              },
              "duration": {
                "name": "number",
                "required": false
              },
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "string",
                    "required": false
                  },
                  "filter_query": {
                    "name": "string",
                    "required": false
                  },
                  "row_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      }
                    ],
                    "required": false
                  }
                },
                "required": true
              },
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'markdown'",
                    "computed": false
                  }
                ],
                "required": false
              },
              "value": {
                "name": "string",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`tooltip_conditional` represents the tooltip shown\nfor different columns and cells.\nThis property allows you to specify different tooltips for\ndepending on certain conditions. For example, you may have\ndifferent tooltips in the same column based on the value\nof a certain data property.\nPriority is from first to last defined conditional tooltip\nin the list. Higher priority (more specific) conditional\ntooltips should be put at the beginning of the list.\nThe `if` refers to the condition that needs to be fulfilled\nin order for the associated tooltip configuration to be\nused. If multiple conditions are defined, all conditions\nmust be met for the tooltip to be used by a cell.\nThe `if` nested property `column_id` refers to the column\nID that must be matched.\nThe `if` nested property `row_index` refers to the index\nof the row in the source `data`.\nThe `if` nested property `filter_query` refers to the query that\nmust evaluate to True.\nThe `type` refers to the type of tooltip syntax used\nfor the tooltip generation. Can either be `markdown`\nor `text`. Defaults to `text`.\nThe `value` refers to the syntax-based content of\nthe tooltip. This value is required.\nThe `delay` represents the delay in milliseconds before\nthe tooltip is shown when hovering a cell. This overrides\nthe table's `tooltip_delay` property. If set to `null`,\nthe tooltip will be shown immediately.\nThe `duration` represents the duration in milliseconds\nduring which the tooltip is shown when hovering a cell.\nThis overrides the table's `tooltip_duration` property.\nIf set to `null`, the tooltip will not disappear.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "objectOf",
            "value": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "exact",
                  "value": {
                    "delay": {
                      "name": "number",
                      "required": false
                    },
                    "duration": {
                      "name": "number",
                      "required": false
                    },
                    "type": {
                      "name": "enum",
                      "value": [
                        {
                          "value": "'text'",
                          "computed": false
                        },
                        {
                          "value": "'markdown'",
                          "computed": false
                        }
                      ],
                      "required": false
                    },
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                }
              ]
            }
          }
        },
        "required": false,
        "description": "`tooltip_data` represents the tooltip shown\nfor different columns and cells.\nThe `property` name refers to the column ID. Each property\ncontains a list of tooltips mapped to the source `data`\nrow index.\nThe `type` refers to the type of tooltip syntax used\nfor the tooltip generation. Can either be `markdown`\nor `text`. Defaults to `text`.\nThe `value` refers to the syntax-based content of\nthe tooltip. This value is required.\nThe `delay` represents the delay in milliseconds before\nthe tooltip is shown when hovering a cell. This overrides\nthe table's `tooltip_delay` property. If set to `null`,\nthe tooltip will be shown immediately.\nThe `duration` represents the duration in milliseconds\nduring which the tooltip is shown when hovering a cell.\nThis overrides the table's `tooltip_duration` property.\nIf set to `null`, the tooltip will not disappear.\nAlternatively, the value of the property can also be\na plain string. The `text` syntax will be used in\nthat case.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip_delay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`tooltip_delay` represents the table-wide delay in milliseconds before\nthe tooltip is shown when hovering a cell. If set to `null`, the tooltip\nwill be shown immediately.\nDefaults to 350.",
        "defaultValue": {
          "value": "350",
          "computed": false
        }
      },
      "tooltip_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`tooltip_duration` represents the table-wide duration in milliseconds\nduring which the tooltip will be displayed when hovering a cell. If\nset to `null`, the tooltip will not disappear.\nDefaults to 2000.",
        "defaultValue": {
          "value": "2000",
          "computed": false
        }
      },
      "filter_query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If `filter_action` is enabled, then the current filtering\nstring is represented in this `filter_query`\nproperty.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "filter_action": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'custom'",
                  "computed": false
                },
                {
                  "value": "'native'",
                  "computed": false
                },
                {
                  "value": "'none'",
                  "computed": false
                }
              ]
            },
            {
              "name": "shape",
              "value": {
                "type": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'custom'",
                      "computed": false
                    },
                    {
                      "value": "'native'",
                      "computed": false
                    }
                  ],
                  "required": true
                },
                "operator": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'and'",
                      "computed": false
                    },
                    {
                      "value": "'or'",
                      "computed": false
                    }
                  ],
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The `filter_action` property controls the behavior of the `filtering` UI.\nIf `'none'`, then the filtering UI is not displayed.\nIf `'native'`, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the `data` property.\nIf `'custom'`, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where `filter_query` or `derived_filter_query_structure` would be the input\nand `data` would be the output).",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "sort_action": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'custom'",
              "computed": false
            },
            {
              "value": "'native'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The `sort_action` property enables data to be\nsorted on a per-column basis.\nIf `'none'`, then the sorting UI is not displayed.\nIf `'native'`, then the sorting UI is displayed and the sorting\nlogic is hanled by the table. That is, it is performed on the data\nthat exists in the `data` property.\nIf `'custom'`, the the sorting UI is displayed but it is the\nresponsibility of the developer to program the sorting\nthrough a callback (where `sort_by` would be the input and `data`\nwould be the output).\nClicking on the sort arrows will update the\n`sort_by` property.",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "sort_mode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'single'",
              "computed": false
            },
            {
              "value": "'multi'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sorting can be performed across multiple columns\n(e.g. sort by country, sort within each country,\n sort by year) or by a single column.\nNOTE - With multi-column sort, it's currently\nnot possible to determine the order in which\nthe columns were sorted through the UI.\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)",
        "defaultValue": {
          "value": "'single'",
          "computed": false
        }
      },
      "sort_by": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "column_id": {
                "name": "string",
                "required": true
              },
              "direction": {
                "name": "enum",
                "value": [
                  {
                    "value": "'asc'",
                    "computed": false
                  },
                  {
                    "value": "'desc'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`sort_by` describes the current state\nof the sorting UI.\nThat is, if the user clicked on the sort arrow\nof a column, then this property will be updated\nwith the column ID and the direction\n(`asc` or `desc`) of the sort.\nFor multi-column sorting, this will be a list of\nsorting parameters, in the order in which they were\nclicked.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "sort_as_null": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              },
              {
                "name": "bool"
              }
            ]
          }
        },
        "required": false,
        "description": "An array of string, number and boolean values that are treated as `null`\n(i.e. ignored and always displayed last) when sorting.\nThis value will be used by columns without `sort_as_null`.\nDefaults to `[]`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_table": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to the outer `table` container.\nThis is commonly used for setting properties like the\nwidth or the height of the table.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style_cell": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual cell of the table.\nThis includes the header cells, the `data` cells, and the filter\ncells."
      },
      "style_data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual data cell.\nThat is, unlike `style_cell`, it excludes the header and filter cells."
      },
      "style_filter": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to the filter cells.\nNote that this may change in the future as we build out a\nmore complex filtering UI."
      },
      "style_header": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual header cell.\nThat is, unlike `style_cell`, it excludes the `data` and filter cells."
      },
      "style_cell_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        }
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'datetime'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the cells.\nThis can be used to apply styles to cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_data_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        }
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'datetime'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "filter_query": {
                    "name": "string",
                    "required": false
                  },
                  "state": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'active'",
                        "computed": false
                      },
                      {
                        "value": "'selected'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "row_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "number"
                        }
                      }
                    ],
                    "required": false
                  },
                  "column_editable": {
                    "name": "bool",
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the data cells.\nThis can be used to apply styles to data cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_filter_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        }
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'datetime'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "column_editable": {
                    "name": "bool",
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the filter cells.\nThis can be used to apply styles to filter cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_header_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "exact",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        }
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'datetime'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "header_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "arrayOf",
                        "value": {
                          "name": "number"
                        }
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      }
                    ],
                    "required": false
                  },
                  "column_editable": {
                    "name": "bool",
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the header cells.\nThis can be used to apply styles to header cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "virtualization": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This property tells the table to use virtualization when rendering.\nAssumptions are that:\nthe width of the columns is fixed;\nthe height of the rows is always the same; and\nruntime styling changes will not affect width and height vs. first rendering",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "derived_filter_query_structure": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "This property represents the current structure of\n`filter_query` as a tree structure. Each node of the\nquery structure has:\ntype (string; required):\n  'open-block',\n  'logical-operator',\n  'relational-operator',\n  'unary-operator', or\n  'expression';\nsubType (string; optional):\n  'open-block': '()',\n  'logical-operator': '&&', '||',\n  'relational-operator': '=', '>=', '>', '<=', '<', '!=', 'contains',\n  'unary-operator': '!', 'is bool', 'is even', 'is nil', 'is num', 'is object', 'is odd', 'is prime', 'is str',\n  'expression': 'value', 'field';\nvalue (any):\n  'expression, value': passed value,\n  'expression, field': the field/prop name.\nblock (nested query structure; optional).\nleft (nested query structure; optional).\nright (nested query structure; optional).\nIf the query is invalid or empty, the `derived_filter_query_structure` will\nbe null."
      },
      "derived_viewport_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "This property represents the current state of `data`\non the current page. This property will be updated\non paging, sorting, and filtering.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_indices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_viewport_indices` indicates the order in which the original\nrows appear after being filtered, sorted, and/or paged.\n`derived_viewport_indices` contains indices for the current page,\nwhile `derived_virtual_indices` contains indices across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_row_ids": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "`derived_viewport_row_ids` lists row IDs in the order they appear\nafter being filtered, sorted, and/or paged.\n`derived_viewport_row_ids` contains IDs for the current page,\nwhile `derived_virtual_row_ids` contains IDs across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_selected_columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "`derived_viewport_selected_columns` contains the ids of the\n`selected_columns` that are not currently hidden."
      },
      "derived_viewport_selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_viewport_selected_rows` represents the indices of the\n`selected_rows` from the perspective of the `derived_viewport_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_selected_row_ids": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "`derived_viewport_selected_row_ids` represents the IDs of the\n`selected_rows` on the currently visible page.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "This property represents the visible state of `data`\nacross all pages after the front-end sorting and filtering\nas been applied.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_indices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_virtual_indices` indicates the order in which the original\nrows appear after being filtered and sorted.\n`derived_viewport_indices` contains indices for the current page,\nwhile `derived_virtual_indices` contains indices across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_row_ids": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "`derived_virtual_row_ids` indicates the row IDs in the order in which\nthey appear after being filtered and sorted.\n`derived_viewport_row_ids` contains IDs for the current page,\nwhile `derived_virtual_row_ids` contains IDs across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_virtual_selected_rows` represents the indices of the\n `selected_rows` from the perspective of the `derived_virtual_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_selected_row_ids": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "`derived_virtual_selected_row_ids` represents the IDs of the\n`selected_rows` as they appear after filtering and sorting,\nacross all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, any `persisted_props` that the\nuser has changed while using the app will keep those changes, as long as\nthe new prop value also matches what was given originally.\nUsed in conjunction with `persistence_type` and `persisted_props`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'columns.name'",
                "computed": false
              },
              {
                "value": "'data'",
                "computed": false
              },
              {
                "value": "'filter_query'",
                "computed": false
              },
              {
                "value": "'hidden_columns'",
                "computed": false
              },
              {
                "value": "'selected_columns'",
                "computed": false
              },
              {
                "value": "'selected_rows'",
                "computed": false
              },
              {
                "value": "'sort_by'",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\n    'columns.name',\n    // data is not included by default\n    'filter_query',\n    'hidden_columns',\n    'selected_columns',\n    'selected_rows',\n    'sort_by'\n]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'local'",
              "computed": false
            },
            {
              "value": "'session'",
              "computed": false
            },
            {
              "value": "'memory'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "'local'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/FullScreen.react.js": {
    "description": "This component is able to render target elements as full-screen.\n\nFunctional component: this component does not need to be wrapped in\n`ddk.App`, and will work as intended themed or not.",
    "displayName": "FullScreen",
    "methods": [
      {
        "name": "graphResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggleFullscreenState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onDOMChanged",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggleFull",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The optional className of the child element(s) that activate\na fullscreen state on click"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The element(s) that, when clicked, will activate a fullscreen state"
      },
      "cardRef": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A reference to a card to expand"
      },
      "target_id": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The id of the DOM element to expand to full screen"
      },
      "hide_target": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An option to initialize the fullscreen target as hidden"
      },
      "hide_if_fullscreen_is_unsupported": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An option to hide children of this component on unsupported\nbrowsers ("
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A boolean representing the current expanded state of the target element"
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      }
    }
  },
  "src/lib/components/Graph.react.generated.js": {
    "description": "Graph can be used to render any plotly.js-powered data visualization.\n\nYou can define callbacks based on user interaction with Graphs such as\nhovering, clicking or selecting",
    "displayName": "PlotlyGraph",
    "methods": [
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleEvent",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "responsive": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If True, the Plotly.js plot will be fully responsive to window resize\nand parent element resize event. This is achieved by overriding\n`config.responsive` to True, `figure.layout.autosize` to True and unsetting\n`figure.layout.height` and `figure.layout.width`.\nIf False, the Plotly.js plot not be responsive to window resize and\nparent element resize event. This is achieved by overriding `config.responsive`\nto False and `figure.layout.autosize` to False.\nIf 'auto' (default), the Graph will determine if the Plotly.js plot can be made fully\nresponsive (True) or not (False) based on the values in `config.responsive`,\n`figure.layout.autosize`, `figure.layout.height`, `figure.layout.width`.\nThis is the legacy behavior of the Graph component.\n\nNeeds to be combined with appropriate dimension / styling through the `style` prop\nto fully take effect.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "clickData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clickAnnotationData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click annotation event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "hoverData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest hover event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clear_on_unhover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, `clear_on_unhover` will clear the `hoverData` property\nwhen the user \"unhovers\" from a point.\nIf False, then the `hoverData` property will be equal to the\ndata from the last point that was hovered over.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest select event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "relayoutData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form `{<attr string>: <value>}`\ndescribing the changes made. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "extendData": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Data that should be appended to existing traces. Has the form\n`[updateData, traceIndices, maxPoints]`, where `updateData` is an object\ncontaining the data to extend, `traceIndices` (optional) is an array of\ntrace indices that should be extended, and `maxPoints` (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching `updateData`\nReference the Plotly.extendTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyextendtraces",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "restyleData": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Data from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form `[edits, indices]`, where `edits` is an object\n`{<attr string>: <value>}` describing the changes made,\nand `indices` is an array of trace indices that were edited.\nRead-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "exact",
          "value": {
            "data": {
              "name": "arrayOf",
              "value": {
                "name": "object"
              },
              "required": false
            },
            "layout": {
              "name": "object",
              "required": false
            },
            "frames": {
              "name": "arrayOf",
              "value": {
                "name": "object"
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plotly.com/javascript/reference\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{\n    data: [],\n    layout: {},\n    frames: [],\n}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div"
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Beta: If true, animate between updates using\nplotly.js's `animate` function",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animation_options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Beta: Object containing animation settings.\nOnly applies if `animate` is `true`",
        "defaultValue": {
          "value": "{\n    frame: {\n        redraw: false,\n    },\n    transition: {\n        duration: 750,\n        ease: 'cubic-in-out',\n    },\n}",
          "computed": false
        }
      },
      "config": {
        "type": {
          "name": "exact",
          "value": {
            "downloadable": {
              "name": "bool",
              "description": "Add a 'downloadable' button to the modebar, allowing .csv data of\n'basic' propTypes to be downloaded",
              "required": false
            },
            "staticPlot": {
              "name": "bool",
              "description": "No interactivity, for export or image generation",
              "required": false
            },
            "plotlyServerURL": {
              "name": "string",
              "description": "Base URL for a Plotly cloud instance, if `showSendToCloud` is enabled",
              "required": false
            },
            "editable": {
              "name": "bool",
              "description": "We can edit titles, move annotations, etc - sets all pieces of `edits`\nunless a separate `edits` config item overrides individual parts",
              "required": false
            },
            "edits": {
              "name": "exact",
              "value": {
                "annotationPosition": {
                  "name": "bool",
                  "description": "The main anchor of the annotation, which is the\ntext (if no arrow) or the arrow (which drags the whole thing leaving\nthe arrow length & direction unchanged)",
                  "required": false
                },
                "annotationTail": {
                  "name": "bool",
                  "description": "Just for annotations with arrows, change the length and direction of the arrow",
                  "required": false
                },
                "annotationText": {
                  "name": "bool",
                  "required": false
                },
                "axisTitleText": {
                  "name": "bool",
                  "required": false
                },
                "colorbarPosition": {
                  "name": "bool",
                  "required": false
                },
                "colorbarTitleText": {
                  "name": "bool",
                  "required": false
                },
                "legendPosition": {
                  "name": "bool",
                  "required": false
                },
                "legendText": {
                  "name": "bool",
                  "description": "Edit the trace name fields from the legend",
                  "required": false
                },
                "shapePosition": {
                  "name": "bool",
                  "required": false
                },
                "titleText": {
                  "name": "bool",
                  "description": "The global `layout.title`",
                  "required": false
                }
              },
              "description": "A set of editable properties",
              "required": false
            },
            "autosizable": {
              "name": "bool",
              "description": "DO autosize once regardless of layout.autosize\n(use default width or height values otherwise)",
              "required": false
            },
            "responsive": {
              "name": "bool",
              "description": "Whether to change layout size when the window size changes",
              "required": false
            },
            "queueLength": {
              "name": "number",
              "description": "Set the length of the undo/redo queue",
              "required": false
            },
            "fillFrame": {
              "name": "bool",
              "description": "If we DO autosize, do we fill the container or the screen?",
              "required": false
            },
            "frameMargins": {
              "name": "number",
              "description": "If we DO autosize, set the frame margins in percents of plot size",
              "required": false
            },
            "scrollZoom": {
              "name": "bool",
              "description": "Mousewheel or two-finger scroll zooms the plot",
              "required": false
            },
            "doubleClick": {
              "name": "enum",
              "value": [
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'reset'",
                  "computed": false
                },
                {
                  "value": "'autosize'",
                  "computed": false
                },
                {
                  "value": "'reset+autosize'",
                  "computed": false
                }
              ],
              "description": "Double click interaction (false, 'reset', 'autosize' or 'reset+autosize')",
              "required": false
            },
            "doubleClickDelay": {
              "name": "number",
              "description": "Delay for registering a double-click event in ms. The\nminimum value is 100 and the maximum value is 1000. By\ndefault this is 300.",
              "required": false
            },
            "showTips": {
              "name": "bool",
              "description": "New users see some hints about interactivity",
              "required": false
            },
            "showAxisDragHandles": {
              "name": "bool",
              "description": "Enable axis pan/zoom drag handles",
              "required": false
            },
            "showAxisRangeEntryBoxes": {
              "name": "bool",
              "description": "Enable direct range entry at the pan/zoom drag points\n(drag handles must be enabled above)",
              "required": false
            },
            "showLink": {
              "name": "bool",
              "description": "Link to open this plot in plotly",
              "required": false
            },
            "sendData": {
              "name": "bool",
              "description": "If we show a link, does it contain data or just link to a plotly file?",
              "required": false
            },
            "linkText": {
              "name": "string",
              "description": "Text appearing in the sendData link",
              "required": false
            },
            "displayModeBar": {
              "name": "enum",
              "value": [
                {
                  "value": "true",
                  "computed": false
                },
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'hover'",
                  "computed": false
                }
              ],
              "description": "Display the mode bar (true, false, or 'hover')",
              "required": false
            },
            "showSendToCloud": {
              "name": "bool",
              "description": "Should we include a modebar button to send this data to a\nPlotly Cloud instance, linked by `plotlyServerURL`.\nBy default this is false.",
              "required": false
            },
            "showEditInChartStudio": {
              "name": "bool",
              "description": "Should we show a modebar button to send this data to a\nPlotly Chart Studio plot. If both this and showSendToCloud\nare selected, only showEditInChartStudio will be\nhonored. By default this is false.",
              "required": false
            },
            "modeBarButtonsToRemove": {
              "name": "array",
              "description": "Remove mode bar button by name.\nAll modebar button names at https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\nCommon names include:\nsendDataToCloud;\n(2D) zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d;\n(Cartesian) hoverClosestCartesian, hoverCompareCartesian;\n(3D) zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d;\n(Geo) zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo;\nhoverClosestGl2d, hoverClosestPie, toggleHover, resetViews.",
              "required": false
            },
            "modeBarButtonsToAdd": {
              "name": "array",
              "description": "Add mode bar button using config objects",
              "required": false
            },
            "modeBarButtons": {
              "name": "any",
              "description": "Fully custom mode bar buttons as nested array,\nwhere the outer arrays represents button groups, and\nthe inner arrays have buttons config objects or names of default buttons",
              "required": false
            },
            "toImageButtonOptions": {
              "name": "exact",
              "value": {
                "format": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'jpeg'",
                      "computed": false
                    },
                    {
                      "value": "'png'",
                      "computed": false
                    },
                    {
                      "value": "'webp'",
                      "computed": false
                    },
                    {
                      "value": "'svg'",
                      "computed": false
                    }
                  ],
                  "description": "The file format to create",
                  "required": false
                },
                "filename": {
                  "name": "string",
                  "description": "The name given to the downloaded file",
                  "required": false
                },
                "width": {
                  "name": "number",
                  "description": "Width of the downloaded file, in px",
                  "required": false
                },
                "height": {
                  "name": "number",
                  "description": "Height of the downloaded file, in px",
                  "required": false
                },
                "scale": {
                  "name": "number",
                  "description": "Extra resolution to give the file after\nrendering it with the given width and height",
                  "required": false
                }
              },
              "description": "Modifications to how the toImage modebar button works",
              "required": false
            },
            "displaylogo": {
              "name": "bool",
              "description": "Add the plotly logo on the end of the mode bar",
              "required": false
            },
            "watermark": {
              "name": "bool",
              "description": "Add the plotly logo even with no modebar",
              "required": false
            },
            "plotGlPixelRatio": {
              "name": "number",
              "description": "Increase the pixel ratio for Gl plot images",
              "required": false
            },
            "topojsonURL": {
              "name": "string",
              "description": "URL to topojson files used in geo charts",
              "required": false
            },
            "mapboxAccessToken": {
              "name": "any",
              "description": "Mapbox access token (required to plot mapbox trace types)\nIf using an Mapbox Atlas server, set this option to '',\nso that plotly.js won't attempt to authenticate to the public Mapbox server.",
              "required": false
            },
            "locale": {
              "name": "string",
              "description": "The locale to use. Locales may be provided with the plot\n(`locales` below) or by loading them on the page, see:\nhttps://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization",
              "required": false
            },
            "locales": {
              "name": "object",
              "description": "Localization definitions, if you choose to provide them with the\nplot rather than registering them globally.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Plotly.js config options.\nSee https://plotly.com/javascript/configuration-options/\nfor more info.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    }
  },
  "src/lib/components/Header.react.js": {
    "description": "An app-level header component.\n\n**Example Usage**\n```\nddk.Header([\n    ddk.Title('FRED Economic Indicators'),\n    ddk.Logo(src='/assets/my-logo.png'),\n    ddk.Menu([\n        ddk.CollapsibleMenu(\n            title='Monetary Data',\n            children=[\n                dcc.Link(\n                'Monetary Base',\n                href='/monetary-base'\n            ),\n            dcc.Link(\n                'Money Velocity',\n                href='/money-velocity'\n            ),\n            dcc.Link(\n                'Reserves',\n                href='/reserves'\n            ),\n            dcc.Link(\n                'Borrowings',\n                href='/borrowings'\n            )\n        ]),\n        dcc.Link('Conditions', href='/conditions'),\n        dcc.Link('Investment', href='/investments'),\n        dcc.Link('Other', href='/other'),\n    ])\n])\n```",
    "displayName": "Header",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the Header.\nThis is frequently a list containing\na `ddk.Logo`, a `ddk.Title`, and a `ddk.Menu`:\n```\n[\n    ddk.Logo(src='/assets/logo.png'),\n    ddk.Title('Header Title'),\n    ddk.Menu([\n        dcc.Link('Historical', href='/historical'),\n        dcc.Link('Forecast', href='/forecast')\n    ]),\n]\n```\nbut it can also contain arbitrary components\nlike controls or buttons."
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) surrounding the header.\nOverrides theme.header_margin."
      },
      "padding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Space (in pixels) on the inside of the header, between the border\nand the edge of the content.\nOverrides theme.header_padding."
      },
      "background_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The background color applied to the header. Overrides theme.header_background_color."
      },
      "box_shadow": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The box shadow(s) applied to the header. Overrides theme.header_box_shadow."
      },
      "border_width": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border width applied to the header. Overrides theme.header_border.width."
      },
      "border_style": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border style applied to the header. Overrides theme.header_border.style."
      },
      "border_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border color applied to the header. Overrides theme.header_border.color."
      },
      "border_radius": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The border radius applied to the header. Overrides theme.header_border.radius."
      },
      "content_alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'spread'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The alignment of header content (ddk.Logo, ddk.Title, controls, and ddk.Menu).\nDefault (legacy) value is 'spread', where controls stretch to fit between\nother components. (when appropriate).\nFor other values, controls will have a min-width of 200px and otherwise have a width\nthat fits its content. Overrides theme.header_content_alignment."
      },
      "font_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font color of Header children. Overrides theme.header_text"
      },
      "font_family": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font family of Header children. Overrides theme.font_family_header"
      },
      "font_size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font size of Header children.\nCan be a relative size, \"smaller\", \"normal\", \"larger\",\nor a CSS attribute size (e.g. `px`, 'em`)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style object of the outermost div of the Header.\nUse this to override e.g. the Header's height\n(`{'height': '100px'}`)"
      }
    }
  },
  "src/lib/components/Icon.react.js": {
    "description": "[Font Awesome](https://fontawesome.com/) icon component.",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A class name to append to the font-awesome classes."
      },
      "icon_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of the font-awesome icon without the fa-"
      },
      "icon_category": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'solid'",
              "computed": false
            },
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'brands'",
              "computed": false
            },
            {
              "value": "'light'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The Font Awesome category for the icon. One of\n     - solid\n     - regular\n     - brands"
      },
      "icon_color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The icon's color."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional style object."
      },
      "fa_script": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A script link to the Font Awesome JavaScript library.\nBy default, the free icons are included automatically.\nIf you have a license for the pro icons, then include\nyour own script with this attribute."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Tooltip hover text for the icon. Maps to the underlying\n[title](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title)\nattribute."
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/Logo.react.js": {
    "description": "A component to display logos (images) within `ddk.Header` or `ddk.Sidebar`.",
    "displayName": "Logo",
    "methods": [
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The image URL. This can be local or remote.\nFor local images, place your image in the apps\n`assets/` folder and pass in a `src` URL like\n`/assets/logo.png`."
      },
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The alt attribute contains a textual description of the image,\nwhich isn't mandatory but is incredibly useful for accessibility\n  - screenreaders read this description out to their users so\nthey know what the image shows, and it is also displayed on the\npage if the image can't be loaded for some reason."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional style on the div that wraps the underlying logo `img`"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className applied to the div that wraps the underlying logo `img`"
      }
    }
  },
  "src/lib/components/Menu.react.js": {
    "description": "A Menu displays a list of `html.A` (for absolute links),\n`dcc.Link` (for fast, in-app relative links),\nor `ddk.CollapsibleMenu` (a collapsible menu) components.\n\nThis component is designed to be embedded inside a `ddk.Header` or\na `ddk.Sidebar` component.\n\n*Example Usage*\n\n```\nddk.Header(\n    children=ddk.Menu([\n        ddk.CollapsibleMenu(\n            title='Monetary Data',\n            children=[\n                dcc.Link(\n                    'Monetary Base',\n                    href='/monetary-base'\n                ),\n                dcc.Link(\n                    'Money Velocity',\n                    href='/money-velocity'\n                ),\n                dcc.Link(\n                    'Reserves',\n                    href='/reserves'\n                ),\n                dcc.Link(\n                    'Borrowings',\n                    href='/borrowings'\n                )\n            ]\n        ),\n        dcc.Link('Conditions', href='/conditions'),\n        dcc.Link('Investment', href='/investments'),\n        dcc.Link('Other', href='/other'),\n    ])\n)\n```",
    "displayName": "Menu",
    "methods": [
      {
        "name": "onLocationChanged",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isOverflow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "el1",
            "type": null
          },
          {
            "name": "el2",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateDimensions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A list of `html.A`, `dcc.Link`, or `ddk.CollapsibleMenu` components"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The className applied to the outermost container of the Menu (a nav component)."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style applied to the outermost container of the Menu (a nav component)."
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/Modal.react.js": {
    "description": "This function is able to render target elements in a modal.\n\nFunctional component: this component does not need to be wrapped in\n`ddk.App`, and will work as intended with or without an inherited theme.",
    "displayName": "Modal",
    "methods": [
      {
        "name": "onDOMChanged",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggleFull",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "graphResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The optional className of the child element that\nopens a modal on click",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "modal_container_className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The optional className of the modal container"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The element that, when clicked, will activate a modal"
      },
      "cardRef": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A reference to a card to expand"
      },
      "target_id": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The id of the DOM element to expand to a Modal"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The width of the element when expanded (% or px)"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The height of the element when expanded (% or px)"
      },
      "hide_target": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An option to initialize the modal target as hidden"
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A boolean representing the current expanded state of the target element"
      },
      "setProps": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      }
    }
  },
  "src/lib/components/Notification.react.js": {
    "description": "",
    "displayName": "Notification",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the Notification."
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The time in milliseconds for which the Notification will\nremain onscreen. Default is 5*1000. -1 indicates no timeout."
      },
      "displayed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not a notification is displayed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "collapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether or not a notification is collapsed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "user_dismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies an 'x' to the top right-hand corner \nof the Notification that dismisses it on click.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'info'",
              "computed": false
            },
            {
              "value": "'warn'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Assigns a type which applies styling and can be\nused to filter.",
        "defaultValue": {
          "value": "'info'",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title of the Notification."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Notification"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Optional additional CSS styles.\n- If `width`, `padding`, or `margin` are supplied within `style`,\nthen this will override the component-level `width`, `padding`, or `margin`."
      },
      "delete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A Dash assigned function for deleting the notification."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets to set an id."
      }
    }
  },
  "src/lib/components/Page.react.js": {
    "description": "A component that describes a single page.\nThis component must be defined within the `children` of a ddk.Report.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Report(display_page_numbers=True, children=[\n        ddk.Page([\n            html.H1('Quarterly Earnings'),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x1', y='y1'\n                ))\n            ]),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x2', y='y2'\n                ))\n            ]),\n\n            html.H2('Expected Returns'),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x2', y='y2'\n                ))\n            ]),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x1', y='y1'\n                ))\n            ]),\n            ddk.PageFooter(\"Past Performance Is No Guarantee of Future Returns.\")\n        ]),\n    ])\n])\n```",
    "displayName": "Page",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The list of components that are children of the Page container."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Page container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "display_page_number": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the page number for this particular Page\nin the PageFooter. Alternatively, set the page numbers for\n_all_ of the pages in the report with the `display_page_numbers`\nproperty in `ddk.Report`."
      },
      "page_margin": {
        "type": {
          "name": "exact",
          "value": {
            "left": {
              "name": "string",
              "required": false
            },
            "right": {
              "name": "string",
              "required": false
            },
            "top": {
              "name": "string",
              "required": false
            },
            "bottom": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Set the (left, right, top, bottom) margin dimensions\nfor this particular Page in units (`in`, `px`, `em`, etc.)"
      }
    }
  },
  "src/lib/components/PageFooter.react.js": {
    "description": "The PageFooter component allows you to customize the content and style\nwithin the bottom margin of your page. A default PageFooter will be included\nin each Page with the dimensions specified by the `page_margin.bottom`, which \ncan be set globally in the `ddk.Report` component or in an individual\nPage component.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Page([\n        ddk.Graph(\n            figure = my_figure,\n        ),\n        # Place an italicized copyright message in the bottom margin\n        ddk.PageFooter(\n            'Copyright \u00a9 2020 Dash Enterprises, Inc. All Rights Reserved',\n            style={'font-style': 'italic'}\n        )\n    ]),\n])\n```",
    "displayName": "PageFooter",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The list of components that are children of the PageFooter container."
      },
      "display_page_number": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the page number for the associated Page in this PageFooter."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "style_page_number": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component's\npage number child element."
      },
      "className_page_number": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the PageFooter's page number\nchild component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the PageFooter container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      }
    }
  },
  "src/lib/components/PageHeader.react.js": {
    "description": "The PageHeader component allows you to customize the content and style\nwithin the top margin of your page. A default PageHeader will be included\nin each Page with the dimensions specified by the `page_margin.top`, which \ncan be set globally in the `ddk.Report` component or in an individual\nPage component.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Page([\n        ddk.PageHeader([\n            # Place a logo in the top margin\n            ddk.Logo(src='https://dash.plotly.com/assets/images/logo-plotly.png'),\n        ]),\n        ddk.Graph(\n            figure = my_figure,\n        ),\n    ]),\n])\n```",
    "displayName": "PageHeader",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The list of components that are children of the PageHeader container."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the PageHeader container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      }
    }
  },
  "src/lib/components/Report.react.js": {
    "description": "The parent component for describing a report.\nThe contents of this component should be a set of `ddk.Page` components.\n\n**Example Usage**\n```\napp.layout = ddk.App([\n    ddk.Report(display_page_numbers=True, children=[\n        ddk.Page([\n            html.H1('Quarterly Earnings'),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x1', y='y1'\n                ))\n            ]),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x2', y='y2'\n                ))\n            ]),\n\n            html.H2('Expected Returns'),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x2', y='y2'\n                ))\n            ]),\n            ddk.Block(width=50, margin=5, children=[\n                ddk.Graph(figure=px.scatter(\n                    ddk.datasets.bubble(),\n                    x='x1', y='y1'\n                ))\n            ]),\n            ddk.PageFooter(\"Past Performance Is No Guarantee of Future Results.\"),\n        ]),\n    ])\n])\n```",
    "displayName": "Report",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The list of components that are children of the PageFooter container.\nThese children should be of the type `ddk.Page`."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "page_style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for all `ddk.Page` children\nof this component."
      },
      "page_style_even": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for all `ddk.Page` children\nof this component with an even page number."
      },
      "page_style_odd": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for all `ddk.Page` children\nof this component with an odd page number."
      },
      "display_page_numbers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether to display page numbers for all `ddk.Page children\nof this component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Report container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'letter'",
              "computed": false
            },
            {
              "value": "'legal'",
              "computed": false
            },
            {
              "value": "'a4'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The physical dimensions of the Page children of this Report container.",
        "defaultValue": {
          "value": "'letter'",
          "computed": false
        }
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'vertical'",
              "computed": false
            },
            {
              "value": "'horizontal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The orientation of the Page children of this Report container.",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "page_number_start_from": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number to begin indexing the page count of the Page children\nof this Report container."
      },
      "page_margin": {
        "type": {
          "name": "exact",
          "value": {
            "left": {
              "name": "string",
              "required": false
            },
            "right": {
              "name": "string",
              "required": false
            },
            "top": {
              "name": "string",
              "required": false
            },
            "bottom": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Set the (left, right, top, bottom) margin dimensions\nfor all Page children of this Report container in units (`in`, `px`, `em`, etc.)"
      },
      "page_margin_even": {
        "type": {
          "name": "exact",
          "value": {
            "left": {
              "name": "string",
              "required": false
            },
            "right": {
              "name": "string",
              "required": false
            },
            "top": {
              "name": "string",
              "required": false
            },
            "bottom": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Set the (left, right, top, bottom) margin dimensions\nfor all Page children of this Report container in units (`in`, `px`, `em`, etc.)\nwith an even page number."
      },
      "page_margin_odd": {
        "type": {
          "name": "exact",
          "value": {
            "left": {
              "name": "string",
              "required": false
            },
            "right": {
              "name": "string",
              "required": false
            },
            "top": {
              "name": "string",
              "required": false
            },
            "bottom": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Set the (left, right, top, bottom) margin dimensions\nfor all Page children of this Report container in units (`in`, `px`, `em`, etc.)\nwith an odd page number."
      },
      "suppress_layout_exceptions": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Row.react.js": {
    "description": "The Row component is intended to wrap `Block` or `Card` components.\nIt will enforce equal height in these components.\n\n`Block` and `Card` do not _need_ to be wrapped in a `Row`: only wrap\nthem in a `Row` if you want to force their contents to have equal height.\n\n**Example Usage**\n\n```\nddk.Row([\n    ddk.Card(\n        width=50,\n        children=ddk.Graph(figure={\n            'data': [{\n                'x': [1, 2, 3, 4],\n                'y': [5, 4, 3, 6],\n                'line': {'shape': 'spline'}\n            }],\n            'layout': {'height': 300}\n        })\n    ),\n\n    ddk.Card(\n        width=50,\n        children='''\n        Sed ut perspiciatis unde omnis iste natus\n        voluptatem accusantium doloremque laudantium,\n        totam rem aperiam, eaque ipsa quae ab illo\n        inventore veritatis et quasi architecto\n        beatae vitae dicta sunt explicabo.\n        '''\n    )\n])\n```\n\nSee more examples in the [Blocks, Cards, and Rows](/blocks) chapter.",
    "displayName": "Row",
    "methods": [
      {
        "name": "updateControlHeight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the Row container."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Row container."
      }
    }
  },
  "src/lib/components/SectionTitle.react.js": {
    "description": "Creates a nice looking section title.\n\n**Usage**\n```\nddk.SectionTitle('Quarterly Earnings')\n```",
    "displayName": "SectionTitle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The title of the SectionTitle"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The component's outermost className"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The component's outermost style"
      }
    }
  },
  "src/lib/components/Sidebar.react.js": {
    "description": "A `Sidebar` is an app-level component used for displaying\na logo (`ddk.Logo`), a descriptive title of the app (`ddk.Title`),\nand/or a set of links (`ddk.Menu`).\n\nThis can be used with our without a `ddk.Header`.\n\n**Example Usage**\n```\nddk.Sidebar(\n    foldable=False,\n    children=[\n        ddk.Title('Economic Indicators'),\n        ddk.Logo(src='/assets/my-logo.png'),\n        ddk.Menu([\n            ddk.CollapsibleMenu(\n                title='Monetary Data',\n                children=[\n                    dcc.Link(\n                        'Monetary Base',\n                        href='/monetary-base'\n                    ),\n                    dcc.Link(\n                        'Money Velocity',\n                        href='/money-velocity'\n                    ),\n                    dcc.Link(\n                        'Reserves',\n                        href='/reserves'\n                    ),\n                    dcc.Link(\n                        'Borrowings',\n                        href='/borrowings'\n                    )\n                ]\n            ),\n            dcc.Link('Conditions', href='/conditions'),\n            dcc.Link('Investment', href='/investments'),\n            dcc.Link('Other', href='/other'),\n        ])\n    ]\n)\n```",
    "displayName": "Sidebar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the Sidebar.\nThis is frequently a list containing\na `ddk.Logo`, a `ddk.Title`, and a `ddk.Menu`:\n```\n[\n    ddk.Logo(src='/assets/logo.png'),\n    ddk.Title('Header Title'),\n    ddk.Menu([\n        dcc.Link('Historical', href='/historical'),\n        dcc.Link('Forecast', href='/forecast'),\n]\n```\nbut it can also contain arbitrary components\nlike controls or buttons."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the Sidebar component."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "foldable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the Sidebar can be collapsed.\nWith `foldable` sidebars, we recommend using icons in your menu items\nso that the links are still visible when collapsed."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style object of the outermost div of the Sidebar.\nUse this to override the Sidebar's width\n(`{'maxWidth': '250px'}`) or the background color\n(`{'backgroundColor': 'white'}`)"
      }
    }
  },
  "src/lib/components/SidebarCompanion.react.js": {
    "description": "A responsive container positioned to the right of\nan app's `ddk.Sidebar`. It takes up the remaining horizontal space\non the screen to the right of the `Sidebar`. When the `Sidebar` folds,\nthe `SidebarCompanion` expands.\n\n`SidebarCompanion` shouldn't be used in any other context besides\nbeing positioned next to the `Sidebar`.",
    "displayName": "SidebarCompanion",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional user-defined CSS class for the SidebarCompanion component."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Overrides the default (inline) styles for the this component."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The list of components that are children of the SidebarCompanion container."
      }
    }
  },
  "src/lib/components/Title.react.js": {
    "description": "A styled div meant to be placed in a `ddk.Header` or a `ddk.Sidebar`",
    "displayName": "Title",
    "methods": [
      {
        "name": "setLineHeight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify Dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The title's content. This is usually just a string."
      },
      "allow_hidden_in_header": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `True`, then the title will disappear on smaller screens when\nthere isn't enough room.\nIf `False`, then the title will disappear _word-by-word_ when there\nisn't enough room.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "capitalization": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'lowercase'",
              "computed": false
            },
            {
              "value": "'uppercase'",
              "computed": false
            },
            {
              "value": "'capitalize'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The text capitalization of the title. 'lowercase' will transform all\ncharacters to lowercase, 'uppercase' will be all caps, and 'capitalize' will follow\n\"title case\" capitalization (the first character of each word will be\nuppercase)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the outermost div of the Title component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Additional class names for the outermost div of the Title component"
      }
    }
  }
}