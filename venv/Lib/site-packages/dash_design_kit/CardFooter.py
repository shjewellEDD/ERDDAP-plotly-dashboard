# AUTO GENERATED FILE - DO NOT EDIT

from dash.development.base_component import Component, _explicitize_args


class CardFooter(Component):
    """A CardFooter component.
A footer component designed to be the last child of a `Card` or `ControlCard`.
Takes `title` (string), `fullscreen`, and `modal` (bool) arguments, in addition
to `children[]` designed to contain Dash Core Components (DCC) controls
(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`), or other components meant to be
displayed in the bottom of the card.

Note that placing a string in `title` and a string in `children` will have a similar effect.
The only differences are that the title string will be bolded and that the children
property can include other components like controls (not just strings).

**Example Usage**
```
app.layout = ddk.App([
    ddk.Card(width=70,
        children=[
            # Allow the card to be expanded to fullscreen or modal
            # Set the expanded modal dimensions to 80%
            ddk.Graph(id="sample-graph-id", figure={
                 'data': [{
                   'x': [1, 2, 3, 4],
                   'y': [4, 1, 6, 9],
                   'line': {'shape': 'spline'}
                }]
            }),
            ddk.CardFooter(
               dcc.DatePickerRange(
                   start_date=datetime.datetime(2019, 1, 1),
                   end_date=datetime.datetime(2020, 8, 1)
               ),
               title='String card footer',
             )
        ],
    ),
])
```

Keyword arguments:
- children (a list of or a singular dash component, string or number; optional): The list of components that are children of the CardFooter container.
These children should be Dash Core Components (DCC) controls
(e.g. `dcc.Dropdown`, `dcc.DatePickerRange`),
or other components meant to be displayed in the bottom of the card.
- id (string; optional): The ID of this component, used to identify Dash components
in callbacks. The ID needs to be unique across all of the
components in an app.
- title (string; optional): string or Dash component; optional
- modal (boolean; optional): Displays an icon that allows the card to be expanded to a modal.
- copy (boolean; optional): Displays an icon that allows the card's innerText to be copied
to the clipboard.
- modal_config (dict; optional): Object that takes 'width' and 'height' arguments to define modal dimensions
Width or height can either be a string or a num N that gets converted to N%. modal_config has the following type: dict containing keys 'width', 'height'.
Those keys have the following types:
  - width (string | number; optional)
  - height (string | number; optional)
- fullscreen (boolean; optional): Displays an icon that allows the card to be expanded to a modal.
- style (dict; optional): Optional additional CSS styles.
- If `width`, `padding`, or `margin` are supplied within `style`,
then this will override the component-level `width`, `padding`, or `margin`.
- className (string; optional): Optional user-defined CSS class for the CardFooter container."""
    @_explicitize_args
    def __init__(self, children=None, id=Component.UNDEFINED, title=Component.UNDEFINED, modal=Component.UNDEFINED, copy=Component.UNDEFINED, modal_config=Component.UNDEFINED, fullscreen=Component.UNDEFINED, style=Component.UNDEFINED, className=Component.UNDEFINED, **kwargs):
        self._prop_names = ['children', 'id', 'title', 'modal', 'copy', 'modal_config', 'fullscreen', 'style', 'className']
        self._type = 'CardFooter'
        self._namespace = 'dash_design_kit'
        self._valid_wildcard_attributes =            []
        self.available_properties = ['children', 'id', 'title', 'modal', 'copy', 'modal_config', 'fullscreen', 'style', 'className']
        self.available_wildcard_properties =            []

        _explicit_args = kwargs.pop('_explicit_args')
        _locals = locals()
        _locals.update(kwargs)  # For wildcard attrs
        args = {k: _locals[k] for k in _explicit_args if k != 'children'}

        for k in []:
            if k not in args:
                raise TypeError(
                    'Required argument `' + k + '` was not specified.')
        super(CardFooter, self).__init__(children=children, **args)
