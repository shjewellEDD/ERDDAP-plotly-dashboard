# AUTO GENERATED FILE - DO NOT EDIT

from dash.development.base_component import Component, _explicitize_args


class ControlItem(Component):
    """A ControlItem component.
A container for DCC controls intended to be supplied as `children` to
the `ddk.ControlCard` component.

**Example Usage**
```
app.layout = ddk.App([
    ddk.ControlCard(
        children=[
              ddk.ControlItem(
                  dcc.Slider(
                      min=0,
                      max=10,
                      marks={
                          0: '0',
                          5: '5',
                          10: '10'
                      },
                      value=5
                  ),
                  label='Thrusters'
              ),
              ddk.ControlItem(
                  dcc.Input(
                      value=50,
                      type='number'
                  ),
                  label='Power'
              )
          ],
        orientation='horizontal',
        label_position='left',
    )
])
```

Keyword arguments:
- children (a list of or a singular dash component, string or number; optional): These should be `dcc` control elements like `dcc.Dropdown`, `dcc.Input`, `dcc.DatePickerSingle` or `htmlButton`.
- id (string; optional): The ID of this component, used to identify Dash components
in callbacks. The ID needs to be unique across all of the
components in an app.
- label (string; optional): The text label for an individual control.
- label_hover_text (string; optional): Text to display when you hover over the Control's label.
- label_icon_name (string; optional): The name of the font-awesome icon to display beside the label.
- label_position (a value equal to: 'top', 'left', 'bottom', 'right'; optional): The positon of the label with respect to the control. Overrides the global
position inherited from the ControlItem's ControlCard.
- label_text_alignment (a value equal to: 'left', 'right', 'center'; optional): The horizontal label text alignment. Overrides the global
text alignment inherited from the ControlItem's ControlCard.
- label_style (dict; optional): Optional additional label CSS styles. Overrides the global label
style inherited from the ControlItem's ControlCard.
- padding (string | number; optional): The padding of (i.e. whitespace around) each individual control. Takes `%` int or string `Npx, Nem`, etc. values.
Overrides the global item padding inherited from the ControlItem's ControlCard.
- width (string | number; optional): The width of the control. Takes percent int or string `Npx, Nem`, etc. values
between 0 and 100 representing the width of the component
with respect to its parent.
  - This is a percentage by default: `25` means take up 25 percent of the space.
  - Unless <1, in which it represents a decimal: 0.25 is the same as 25

Note that these units are different than the CSS `style` units where
`style={'width': 25}` means _25 pixels_, not 25 percent.
- height (string | number; optional): The height of the control. Takes percent int or string `Npx, Nem`, etc. values.
- style (dict; optional): Optional additional CSS styles.
- If `width`, `padding`, or `margin` are supplied within `style`,
then this will override the component-level `width`, `padding`, or `margin`.
- className (string; optional): Additional user-supplied classNames for the control container"""
    @_explicitize_args
    def __init__(self, children=None, id=Component.UNDEFINED, label=Component.UNDEFINED, label_hover_text=Component.UNDEFINED, label_icon_name=Component.UNDEFINED, label_position=Component.UNDEFINED, label_text_alignment=Component.UNDEFINED, label_style=Component.UNDEFINED, padding=Component.UNDEFINED, width=Component.UNDEFINED, height=Component.UNDEFINED, style=Component.UNDEFINED, className=Component.UNDEFINED, **kwargs):
        self._prop_names = ['children', 'id', 'label', 'label_hover_text', 'label_icon_name', 'label_position', 'label_text_alignment', 'label_style', 'padding', 'width', 'height', 'style', 'className']
        self._type = 'ControlItem'
        self._namespace = 'dash_design_kit'
        self._valid_wildcard_attributes =            []
        self.available_properties = ['children', 'id', 'label', 'label_hover_text', 'label_icon_name', 'label_position', 'label_text_alignment', 'label_style', 'padding', 'width', 'height', 'style', 'className']
        self.available_wildcard_properties =            []

        _explicit_args = kwargs.pop('_explicit_args')
        _locals = locals()
        _locals.update(kwargs)  # For wildcard attrs
        args = {k: _locals[k] for k in _explicit_args if k != 'children'}

        for k in []:
            if k not in args:
                raise TypeError(
                    'Required argument `' + k + '` was not specified.')
        super(ControlItem, self).__init__(children=children, **args)
